@using System.Text.Json;

<div class="game-container" tabindex="0" style="@_containerCss" @onclick="_gameManager.StartGame" @onkeydown="HandleKeyDown" @onkeydown:preventDefault="true" @onkeydown:stopPropagation="true">
  <div class="sky" style="@_skyCss">
    <Bird Model="_gameManager.Bird"></Bird>

    @foreach (var pipes in _gameManager.Pipes)
    {
      <Pipes Model="pipes"></Pipes>
    }
  </div>
  <div class="ground" style="@_groundCss"></div>
</div>
<div>
<textarea class="game-info" name="info" style="@_infoCss" disabled>
@GameInfo()

Controls:
P - Pause
I - Invincibility
O - Show game state
</textarea>
</div>
@code {

    GameManager _gameManager = new GameManager();

    private string _containerCss => $"height: {GameManager.ContainerHeight}px; width: {GameManager.ContainerWidth}px;";
    private string _skyCss => $"height: {GameManager.SkyHeight}px; width: {GameManager.ContainerWidth}px;";
    private string _groundCss => $"top: {GameManager.SkyHeight}px; height: {GameManager.GroundHeight}px; width: {GameManager.ContainerWidth}px;";
    private string _infoCss => $"position: absolute; top: 0; left: {GameManager.ContainerWidth}px; height: {GameManager.ContainerHeight}px; width: 400px;";

    protected override void OnInitialized()
    {
        _gameManager.OnReadyToRender += (o, e) => StateHasChanged();
    }

    private string GameInfo()
    {
        var info = new List<string> {
            GameStateMessage()
        };

        if(_gameManager.Invincibility){
            info.Add("Invincibility is on.");
        }

        if(_gameManager.ShowGameState){
            info.Add(SerializedGameState());
        }

        return string.Join('\n', info);
    }

    private string GameStateMessage()
    {
        if (_gameManager.IsGameOver)
        {
            return "Game Over. Click or press \"C\" to restart.";
        }

        if (_gameManager.IsPaused)
        {
            return "Paused. Press \"P\" to resume.";
        }

        if (!_gameManager.IsRunning)
        {
            return "Click the game to start.";
        }

        return "";
    }

    private string SerializedGameState()
    {
        return JsonSerializer.Serialize(_gameManager, new JsonSerializerOptions() { WriteIndented = true });
    }

    private async Task HandleKeyDown(KeyboardEventArgs eventArgs)
    {
        if (!_gameManager.IsRunning && eventArgs.Key == "c")
        {
            await _gameManager.StartGame();
            return;
        }

        switch (eventArgs.Key)
        {
            case " ":
                _gameManager.HandleUserInput(UserInputCommand.Jump);
                break;
            case "p":
                _gameManager.HandleUserInput(UserInputCommand.Pause);
                break;
            case "i":
                _gameManager.HandleUserInput(UserInputCommand.Invincibility);
                break;
            case "o":
                _gameManager.HandleUserInput(UserInputCommand.ShowGameState);
                break;
        }
    }
}
